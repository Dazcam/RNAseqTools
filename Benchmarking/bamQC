    
rule bam_stats:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai"
    output:
        "{mapping_folder}/{sample}.stats.txt"
    shell:
        "bam_stat.py -i {input.bam} > {output}"

rule bam_dist:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai",
        bed=config["bed_file"]
    output:
        "{mapping_folder}/{sample}.dist.txt"
    log:
        "Logs/BamQC/{sample}_dist.txt"
    shell:
        "(read_distribution.py -r {input.bed} -i {input.bam} > {output}) 2> {log}"

rule bam_strand:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai",
        bed=config["bed_file"]
    output:
        "{mapping_folder}/{sample}.expt.txt"
    log:
        "Logs/BamQC/{sample}_expt.txt"
    shell:
        "(infer_experiment.py -r {input.bed} -i {input.bam} > {output}) 2> {log}"

rule bam_inner_dist:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai",
        bed=config["bed_file"]
    output:
        "{mapping_folder}/{sample}.inner_distance_freq.txt"
    params:
         prefix = "{mapping_folder}/{sample}"
    log:
        "Logs/BamQC/{sample}_inner_dist.txt"
    shell:
        "(inner_distance.py -r {input.bed} -i {input.bam} -o {params.prefix} -u 1000 -s 10) 2>{log}"

rule bam_junction_sat:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai",
        bed=config["bed_file"]
    output:
        "{mapping_folder}/{sample}.junctionSaturation_plot.r"
    params:
         prefix = "{mapping_folder}/{sample}"
    log:
        "Logs/BamQC/{sample}_junction_sat.txt"
    shell:
        "(junction_saturation.py -r {input.bed} -i {input.bam} -o {params.prefix}) 2>{log}"

rule bam_cov:
    input:
        bam="{mapping_folder}/{sample}.sort.bam",
        index="{mapping_folder}/{sample}.sort.bam.bai",
    output:
        "{mapping_folder}/{sample}.cov.txt"
    shell:
        "/c8000xd3/rnaseq-heath/bin/samtools idxstats {input.bam} > {output}"
    
rule summarise_qc:
    input:
        expand("{mapping_folder}/{sample}.stats.txt", mapping_folder=config['mappings'], sample=config['samples']),
        expand("{mapping_folder}/{sample}.dist.txt", mapping_folder=config['mappings'], sample=config['samples']),
        expand("{mapping_folder}/{sample}.expt.txt", mapping_folder=config['mappings'], sample=config['samples']),
        expand("{mapping_folder}/{sample}.inner_distance_freq.txt", mapping_folder=config['mappings'], sample=config['samples']),
        expand("{mapping_folder}/{sample}.junctionSaturation_plot.r", mapping_folder=config['mappings'], sample=config['samples']),
        expand("{mapping_folder}/{sample}.cov.txt", mapping_folder=config['mappings'], sample=config['samples'])
    output:
        expand("{mapping_folder}/Tables/{table}.txt", mapping_folder=config['mappings'], table=["read_numbers", "read_distribution", "read_strand", "read_distance", "junction_sat"])
    params:    
        stats_folder=config['mappings']
    log:
        "Logs/BamQC/summarise_qc.txt"
    shell:
        "(Rscript R/SummariseBamQC.R {params.stats_folder}) 2> {log}"

rule qc_report:
    input: 
        rules.summarise_qc.output
    output:
        "{mapping_folder}/BamQC.pdf"
    params:
        summary_folder="{mapping_folder}/Tables"
    shell:
        "Rscript -e 'library(rmarkdown); folder<-{params.summary_folder}; render(\"R/BamQC.Rmd\", \"tufte_handout\", {output})'"
